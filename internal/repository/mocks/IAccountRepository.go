// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/bhuvi1021/TripleA/internal/models"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// IAccountRepository is an autogenerated mock type for the IAccountRepository type
type IAccountRepository struct {
	mock.Mock
}

type IAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IAccountRepository) EXPECT() *IAccountRepository_Expecter {
	return &IAccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: account
func (_m *IAccountRepository) CreateAccount(account models.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IAccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type IAccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - account models.Account
func (_e *IAccountRepository_Expecter) CreateAccount(account interface{}) *IAccountRepository_CreateAccount_Call {
	return &IAccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", account)}
}

func (_c *IAccountRepository_CreateAccount_Call) Run(run func(account models.Account)) *IAccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Account))
	})
	return _c
}

func (_c *IAccountRepository_CreateAccount_Call) Return(_a0 error) *IAccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAccountRepository_CreateAccount_Call) RunAndReturn(run func(models.Account) error) *IAccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceForUpdate provides a mock function with given fields: tx, accountId
func (_m *IAccountRepository) GetBalanceForUpdate(tx *sql.Tx, accountId int64) (float64, error) {
	ret := _m.Called(tx, accountId)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceForUpdate")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (float64, error)); ok {
		return rf(tx, accountId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) float64); ok {
		r0 = rf(tx, accountId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAccountRepository_GetBalanceForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceForUpdate'
type IAccountRepository_GetBalanceForUpdate_Call struct {
	*mock.Call
}

// GetBalanceForUpdate is a helper method to define mock.On call
//   - tx *sql.Tx
//   - accountId int64
func (_e *IAccountRepository_Expecter) GetBalanceForUpdate(tx interface{}, accountId interface{}) *IAccountRepository_GetBalanceForUpdate_Call {
	return &IAccountRepository_GetBalanceForUpdate_Call{Call: _e.mock.On("GetBalanceForUpdate", tx, accountId)}
}

func (_c *IAccountRepository_GetBalanceForUpdate_Call) Run(run func(tx *sql.Tx, accountId int64)) *IAccountRepository_GetBalanceForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(int64))
	})
	return _c
}

func (_c *IAccountRepository_GetBalanceForUpdate_Call) Return(_a0 float64, _a1 error) *IAccountRepository_GetBalanceForUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAccountRepository_GetBalanceForUpdate_Call) RunAndReturn(run func(*sql.Tx, int64) (float64, error)) *IAccountRepository_GetBalanceForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAccountId provides a mock function with given fields: accountId
func (_m *IAccountRepository) GetByAccountId(accountId int64) (*models.Account, error) {
	ret := _m.Called(accountId)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccountId")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Account, error)); ok {
		return rf(accountId)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Account); ok {
		r0 = rf(accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAccountRepository_GetByAccountId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccountId'
type IAccountRepository_GetByAccountId_Call struct {
	*mock.Call
}

// GetByAccountId is a helper method to define mock.On call
//   - accountId int64
func (_e *IAccountRepository_Expecter) GetByAccountId(accountId interface{}) *IAccountRepository_GetByAccountId_Call {
	return &IAccountRepository_GetByAccountId_Call{Call: _e.mock.On("GetByAccountId", accountId)}
}

func (_c *IAccountRepository_GetByAccountId_Call) Run(run func(accountId int64)) *IAccountRepository_GetByAccountId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *IAccountRepository_GetByAccountId_Call) Return(_a0 *models.Account, _a1 error) *IAccountRepository_GetByAccountId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAccountRepository_GetByAccountId_Call) RunAndReturn(run func(int64) (*models.Account, error)) *IAccountRepository_GetByAccountId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function with given fields: tx, accountId, newBalance
func (_m *IAccountRepository) UpdateBalance(tx *sql.Tx, accountId int64, newBalance float64) error {
	ret := _m.Called(tx, accountId, newBalance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, float64) error); ok {
		r0 = rf(tx, accountId, newBalance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IAccountRepository_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type IAccountRepository_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - tx *sql.Tx
//   - accountId int64
//   - newBalance float64
func (_e *IAccountRepository_Expecter) UpdateBalance(tx interface{}, accountId interface{}, newBalance interface{}) *IAccountRepository_UpdateBalance_Call {
	return &IAccountRepository_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", tx, accountId, newBalance)}
}

func (_c *IAccountRepository_UpdateBalance_Call) Run(run func(tx *sql.Tx, accountId int64, newBalance float64)) *IAccountRepository_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(int64), args[2].(float64))
	})
	return _c
}

func (_c *IAccountRepository_UpdateBalance_Call) Return(_a0 error) *IAccountRepository_UpdateBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAccountRepository_UpdateBalance_Call) RunAndReturn(run func(*sql.Tx, int64, float64) error) *IAccountRepository_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAccountRepository creates a new instance of IAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccountRepository {
	mock := &IAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
