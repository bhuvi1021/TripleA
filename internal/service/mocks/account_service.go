// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/bhuvi1021/TripleA/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IAccountService is an autogenerated mock type for the IAccountService type
type IAccountService struct {
	mock.Mock
}

type IAccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *IAccountService) EXPECT() *IAccountService_Expecter {
	return &IAccountService_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, req
func (_m *IAccountService) CreateAccount(ctx context.Context, req models.CreateAccountRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateAccountRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IAccountService_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type IAccountService_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.CreateAccountRequest
func (_e *IAccountService_Expecter) CreateAccount(ctx interface{}, req interface{}) *IAccountService_CreateAccount_Call {
	return &IAccountService_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, req)}
}

func (_c *IAccountService_CreateAccount_Call) Run(run func(ctx context.Context, req models.CreateAccountRequest)) *IAccountService_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateAccountRequest))
	})
	return _c
}

func (_c *IAccountService_CreateAccount_Call) Return(_a0 error) *IAccountService_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAccountService_CreateAccount_Call) RunAndReturn(run func(context.Context, models.CreateAccountRequest) error) *IAccountService_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *IAccountService) GetAccount(ctx context.Context, id int64) (*models.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAccountService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type IAccountService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IAccountService_Expecter) GetAccount(ctx interface{}, id interface{}) *IAccountService_GetAccount_Call {
	return &IAccountService_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *IAccountService_GetAccount_Call) Run(run func(ctx context.Context, id int64)) *IAccountService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IAccountService_GetAccount_Call) Return(_a0 *models.Account, _a1 error) *IAccountService_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAccountService_GetAccount_Call) RunAndReturn(run func(context.Context, int64) (*models.Account, error)) *IAccountService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAccountService creates a new instance of IAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccountService {
	mock := &IAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
