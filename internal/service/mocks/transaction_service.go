// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/bhuvi1021/TripleA/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ITransactionService is an autogenerated mock type for the ITransactionService type
type ITransactionService struct {
	mock.Mock
}

type ITransactionService_Expecter struct {
	mock *mock.Mock
}

func (_m *ITransactionService) EXPECT() *ITransactionService_Expecter {
	return &ITransactionService_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, req
func (_m *ITransactionService) CreateTransaction(ctx context.Context, req models.CreateTransactionArgs) (models.CreateTransactionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 models.CreateTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTransactionArgs) (models.CreateTransactionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTransactionArgs) models.CreateTransactionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CreateTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateTransactionArgs) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITransactionService_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type ITransactionService_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.CreateTransactionArgs
func (_e *ITransactionService_Expecter) CreateTransaction(ctx interface{}, req interface{}) *ITransactionService_CreateTransaction_Call {
	return &ITransactionService_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, req)}
}

func (_c *ITransactionService_CreateTransaction_Call) Run(run func(ctx context.Context, req models.CreateTransactionArgs)) *ITransactionService_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateTransactionArgs))
	})
	return _c
}

func (_c *ITransactionService_CreateTransaction_Call) Return(_a0 models.CreateTransactionResponse, _a1 error) *ITransactionService_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITransactionService_CreateTransaction_Call) RunAndReturn(run func(context.Context, models.CreateTransactionArgs) (models.CreateTransactionResponse, error)) *ITransactionService_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewITransactionService creates a new instance of ITransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionService {
	mock := &ITransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
